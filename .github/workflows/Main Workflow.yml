name: Main Workflow

on:
  schedule:
    - cron: "0 1 * * *"  # Run every 30 minutes
  push:
    branches:
      - master  # Ensure it runs on the master branch
  workflow_dispatch:  # Allow manual triggering of the workflow

jobs:
  generate_and_push:
    runs-on: ubuntu-latest  # Use the latest Ubuntu environment

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3  # Checkout the repository's code

    - name: Set up Python
      uses: actions/setup-python@v4  # Set up the Python environment
      with:
        python-version: '3.x'  # Specify Python version

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip  # Upgrade pip
        pip install pytz requests aiohttp  # Install requests and aiohttp libraries

    - name: Pull
      run: |
        git pull

    - name: Run Adblock Rule Generator
      run: python Adblock_Rule_Generator.py  # Run the script to generate the Adblock filter file
    
    - name: Run Process Filters
      run: python Process_Filters.py

    - name: Commit and push changes
      id: push_changes  # Set step ID for later reference
      run: |
        # Configure git user information
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git add ADBLOCK_RULE_COLLECTION.txt
        git add ADBLOCK_RULE_COLLECTION_DNS.txt
        git add ADBLOCK_RULE_COLLECTION_DOMAIN.txt
        git add ADBLOCK_RULE_COLLECTION_HOST_IPV4.txt
        git add ADBLOCK_RULE_COLLECTION_HOST_IPV6.txt
        
        # Attempt to commit changes
        git commit -m "Update Adblock rules" || echo "No changes to commit"
        
        # Attempt to pull from the remote repository before pushing changes
        for attempt in {1..5}; do
          echo "Attempt $attempt: Pulling latest changes from remote..."
          if git pull --rebase; then
            echo "Pull successful."
          else
            echo "Pull failed, skipping pull and continuing to push."
          fi

          # Attempt to push changes
          if git push; then
            echo "Push successful."
            exit 0  # Exit the script
          else
            echo "Push failed, retrying in $((attempt * 10)) seconds..."
            sleep $((attempt * 10))  # Exponential backoff: first wait 10 seconds, then 20 seconds, etc.
          fi
        done
        
        echo "Push failed after multiple attempts, exiting with error."
        exit 1  # Exit with error if all attempts fail
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-release:
    runs-on: ubuntu-latest  # Use the latest Ubuntu version as the runtime environment
    needs: [generate_and_push]
    steps:
      - name: Clear previous logs  # Clear previous log files
        run: |
          sudo rm -rf /home/runner/runners/*/_diag/*.log || true
    
      - name: Checkout code  # Checkout the code
        uses: actions/checkout@v3  # Use the official checkout action to fetch the repository code

      - name: Get current time  # Get the current time
        id: current-time  # Set step ID for future references
        run: echo "time=$(date +'%y%m%d%H%M')" >> $GITHUB_ENV  # Get the current time and store it as a GitHub Actions environment variable

      - name: Pull
        run: |
          git pull

      - name: Update timestamp file  # Update the timestamp file
        run: echo "${{ env.time }}" > timestamp.txt  # Write the current time to timestamp.txt

      - name: Force add and commit changes  # Force add and commit changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add -f ADBLOCK_RULE_COLLECTION.txt ADBLOCK_RULE_COLLECTION_HOST_IPV4.txt ADBLOCK_RULE_COLLECTION_DNS.txt ADBLOCK_RULE_COLLECTION_HOST_IPV6.txt ADBLOCK_RULE_COLLECTION_DOMAIN.txt timestamp.txt
          git commit -m "Forced update of adblock files and timestamp"
          for attempt in {1..5}; do  # Try 5 times
            if git push origin master; then
              break
            else
              echo "Push failed, attempting to pull and rebase..."
              git pull --rebase  # Pull and rebase changes from remote
              sleep $((attempt * 10))  # Exponential backoff, wait 10 seconds on first attempt, 20 seconds on second, and so on
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Use custom token for authentication

      - name: Create Release  # Create a new release
        id: create_release  # Set step ID for future references
        uses: actions/create-release@v1  # Use the official create-release action
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Use custom token for authentication
        with:
          tag_name: release-${{ env.time }}  # Use current time as the tag name
          release_name: Release ${{ env.time }}  # Use current time as the release name
          body: "Periodic release of adblock files."  # Release description
          draft: false  # Publish as a final release
          prerelease: false  # Do not publish as a pre-release

      - name: Upload ADBLOCK_RULE_COLLECTION.txt  # Upload ADBLOCK_RULE_COLLECTION.txt file
        uses: actions/upload-release-asset@v1  # Use the official upload-release-asset action
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Use custom token for authentication
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}  # Use the upload URL from the release creation step
          asset_path: ADBLOCK_RULE_COLLECTION.txt  # File path to upload
          asset_name: ADBLOCK_RULE_COLLECTION.txt  # Name of the file after upload
          asset_content_type: text/plain  # File content type

      - name: Upload ADBLOCK_RULE_COLLECTION_HOST_IPV4.txt  # Upload ADBLOCK_RULE_COLLECTION_HOST_IPV4.txt file
        uses: actions/upload-release-asset@v1  # Use the official upload-release-asset action
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Use custom token for authentication
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}  # Use the upload URL from the release creation step
          asset_path: ADBLOCK_RULE_COLLECTION_HOST_IPV4.txt  # File path to upload
          asset_name: ADBLOCK_RULE_COLLECTION_HOST_IPV4.txt  # Name of the file after upload
          asset_content_type: text/plain  # File content type

      - name: Upload ADBLOCK_RULE_COLLECTION_DNS.txt  # Upload ADBLOCK_RULE_COLLECTION_DNS.txt file
        uses: actions/upload-release-asset@v1  # Use the official upload-release-asset action
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Use custom token for authentication
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}  # Use the upload URL from the release creation step
          asset_path: ADBLOCK_RULE_COLLECTION_DNS.txt  # File path to upload
          asset_name: ADBLOCK_RULE_COLLECTION_DNS.txt  # Name of the file after upload
          asset_content_type: text/plain  # File content type

      - name: Upload ADBLOCK_RULE_COLLECTION_HOST_IPV6.txt  # Upload ADBLOCK_RULE_COLLECTION_HOST_IPV6.txt file
        uses: actions/upload-release-asset@v1  # Use the official upload-release-asset action
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Use custom token for authentication
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}  # Use the upload URL from the release creation step
          asset_path: ADBLOCK_RULE_COLLECTION_HOST_IPV6.txt  # File path to upload
          asset_name: ADBLOCK_RULE_COLLECTION_HOST_IPV6.txt  # Name of the file after upload
          asset_content_type: text/plain  # File content type

      - name: Upload ADBLOCK_RULE_COLLECTION_DOMAIN.txt  # Upload ADBLOCK_RULE_COLLECTION_DOMAIN.txt file
        uses: actions/upload-release-asset@v1  # Use the official upload-release-asset action
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Use custom token for authentication
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}  # Use the upload URL from the release creation step
          asset_path: ADBLOCK_RULE_COLLECTION_DOMAIN.txt  # File path to upload
          asset_name: ADBLOCK_RULE_COLLECTION_DOMAIN.txt  # Name of the file after upload
          asset_content_type: text/plain  # File content type